@using CsvHelper
@using System.Globalization
@using BlazorLanguageLearningApp.Client.Helpers;
@using CsvHelper.Configuration

@inject IStringLocalizer<Pages.Set> Loc

<!-- IMPORT CSV MODAL -->
<Modal @ref="importFromCsvModal" Title="@Loc["UploadCsvFile"]" IsVerticallyCentered="true" OnHidden="OnImportFromCsvModalHidden">
    <BodyTemplate>
        <div class="container">
            <InputFile OnChange="LoadExampleFileContent" accept=".csv" @key=@(fileInputId) />
            <div>
                <h4 class="mt-3">@Loc["TopFiveRowsFromFile"]:</h4>
                <div class="border overflow-auto">
                    @if (csvFileContent is null)
                    {
                        <span class="px-3 py-2">@Loc["NoFileSelected"]</span>
                    }
                    else if (csvFileContent.Count == 0)
                    {
                        <span class="px-3 py-2">@Loc["TheSelectedFileIsEmpty"]</span>
                    }
                    else
                    {
                        <table class="table table-bordered w-100 mb-0">
                            <thead>
                                <tr>
                                    @for (int i = 1; i <= csvFileContent.First().Length; i++)
                                    {
                                        <td class="text-nowrap">@String.Format($"{@Loc["NumberedColumn"]}", @i)</td>
                                    }
                                </tr>
                            </thead>
                            <tbody class=" table-group-divider">
                                @foreach (var line in csvFileContent)
                                {
                                    <tr>
                                        @foreach (var col in line)
                                        {
                                            <td>@col</td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>
            <hr />
            <h4 class="mt-3">@Loc["Columns"]:</h4>
            <div class="ms-2">
                @foreach (var columnName in Enum.GetValues<ColumnName>())
                {
                    <div class="row mb-2">
                        <div class="col-7 d-flex align-items-center">
                            <label for="@String.Format($"columnFor{0}Select", columnName.ToString())">@Loc[columnName.ToString()]:</label>
                        </div>
                        <div class="col-5">
                            <InputSelect class="form-select" id="@String.Format($"columnFor{0}Select", columnName)" @bind-Value="importColumns[columnName.ToString()].Column" Disabled="@NoFileSelected">
                                <option value="0">@Loc["None"]</option>
                                @foreach (var column in GetAvailableColumns(importColumns[columnName.ToString()].Column))
                                {
                                    <option value="@column">@String.Format($"{@Loc["NumberedColumn"]}", column)</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                }
            </div>
            <hr />
            <h4 class="mt-3">@Loc["Languages"]:</h4>
            <div class="row mb-2">
                <div class="col-7 d-flex align-items-center">
                    <label for="termLanguageInput">@Loc["TermLanguage"]:</label>
                </div>
                <div class="col-5">
                    <TextInput id="termLanguageInput" @bind-Value="customTermLanguage" Placeholder="@Loc["TermLanguage"]" MaxLength="25" Disabled="@(!UseCustomTermLanguage || NoFileSelected)" />
                </div>
            </div>
            <div class="row mb-2">
                <div class="col-7 d-flex align-items-center">
                    <label for="definitionLanguageInput">@Loc["DefinitionLanguage"]:</label>
                </div>
                <div class="col-5">
                    <TextInput id="definitionLanguageInput" @bind-Value="customDefinitionLanguage" Placeholder="@Loc["DefinitionLanguage"]" MaxLength="25" Disabled="@(!UseCustomDefinitionLanguage || NoFileSelected)" />
                </div>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="() => importFromCsvModal.HideAsync()">@Loc["Close"]</Button>
        <Button Color="ButtonColor.Primary" @onclick="ImportFile" Disabled="@CannotImport">@Loc["UploadFile"]</Button>
    </FooterTemplate>
</Modal>



<Modal @ref="importSelectionModal" Title="@Loc["SelectCardsToImport"]" IsVerticallyCentered="true" IsScrollable="true" Size="ModalSize.Large"  OnHidden="OnImportSelectionModalHidden">
    <BodyTemplate>
        <Grid TItem="BlazorLanguageLearningApp.Shared.Card"
              Class="table table-hover table-bordered"
              Data="cards"
              AllowFiltering="true"
              AllowSelection="true"
              SelectionMode="GridSelectionMode.Multiple"
              @bind-SelectedItems="@selectedCards"
              Responsive="true">

            <GridColumns>
                <GridColumn TItem="BlazorLanguageLearningApp.Shared.Card" HeaderText="Term" PropertyName="Term">
                    @context.Term
                </GridColumn>
                <GridColumn TItem="BlazorLanguageLearningApp.Shared.Card" HeaderText="Definition" PropertyName="Definition">
                    @context.Definition
                </GridColumn>
                <GridColumn TItem="BlazorLanguageLearningApp.Shared.Card" HeaderText="Term Language" PropertyName="TermLanguage">
                    @context.TermLanguage
                </GridColumn>
                <GridColumn TItem="BlazorLanguageLearningApp.Shared.Card" HeaderText="Definition Language" PropertyName="DefinitionLanguage">
                    @context.DefinitionLanguage
                </GridColumn>
            </GridColumns>

        </Grid>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="() => importFromCsvModal.HideAsync()">@Loc["Close"]</Button>
        <Button Color="ButtonColor.Primary" @onclick="ImportFile">@Loc["Import"]</Button>
    </FooterTemplate>
</Modal>

<div class="dropdown">
    <button class="btn btn-primary dropdown-toggle d-block w-100" type="button" data-bs-toggle="dropdown" aria-expanded="false">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-arrow-bar-up" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M8 10a.5.5 0 0 0 .5-.5V3.707l2.146 2.147a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 1 0 .708.708L7.5 3.707V9.5a.5.5 0 0 0 .5.5m-7 2.5a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13a.5.5 0 0 1-.5-.5" />
        </svg>
        @Loc["ImportCards"]
    </button>
    <ul class="dropdown-menu">
        <li>
            <Button Type="ButtonType.Button" Class="dropdown-item" @onclick="() => importFromCsvModal.ShowAsync()">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-file-earmark-arrow-up" viewBox="0 0 16 16">
                    <path d="M8.5 11.5a.5.5 0 0 1-1 0V7.707L6.354 8.854a.5.5 0 1 1-.708-.708l2-2a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 7.707z" />
                    <path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2M9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5z" />
                </svg>
                @Loc["FromCsvFile"]
            </Button>
        </li>
        <li>
            <Button Type="ButtonType.Button" Class="dropdown-item" @onclick="() => importFromCsvModal.ShowAsync()">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-copy" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M4 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2zm2-1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM2 5a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1v-1h1v1a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h1v1z" />
                </svg>
                @Loc["FromAnotherSet"]
            </Button>
        </li>
    </ul>
</div>

@code {
    private Modal importFromCsvModal = default!;
    private Modal importSelectionModal = default!;

    private Guid fileInputId = Guid.NewGuid();
    private IBrowserFile? selectedFile;
    private List<string[]>? csvFileContent;
    private List<BlazorLanguageLearningApp.Shared.Card> cards = default!;
    private HashSet<BlazorLanguageLearningApp.Shared.Card> selectedCards = new();

    private Dictionary<string, SelectColumnResponse> importColumns = new()
    {
        {"TermLanguage", new SelectColumnResponse()},
        {"DefinitionLanguage", new SelectColumnResponse()},
        {"Term", new SelectColumnResponse()},
        {"Definition", new SelectColumnResponse()},
    };

    private bool UseCustomTermLanguage => importColumns["TermLanguage"].Column == 0;
    private bool UseCustomDefinitionLanguage => importColumns["DefinitionLanguage"].Column == 0;
    private string customTermLanguage = "";
    private string customDefinitionLanguage = "";

    private bool NoFileSelected => selectedFile is null;
    private bool CannotImport => 
        (csvFileContent is null || csvFileContent.Count == 0) 
        || importColumns["Term"].Column == 0 
        || importColumns["Definition"].Column == 0;

    private void OnImportFromCsvModalHidden()
    {
        csvFileContent?.Clear();
        fileInputId = Guid.NewGuid();
        importColumns = new()
        {
            {"TermLanguage", new SelectColumnResponse()},
            {"DefinitionLanguage", new SelectColumnResponse()},
            {"Term", new SelectColumnResponse()},
            {"Definition", new SelectColumnResponse()},
        };
        customTermLanguage = "";
        customDefinitionLanguage = "";
    }

    private void OnImportSelectionModalHidden()
    {
        csvFileContent?.Clear();
        cards = default!;
        selectedCards = new();
        fileInputId = Guid.NewGuid();
    }

    private async void LoadExampleFileContent(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;

        csvFileContent = new(5);

        using (var reader = new StreamReader(selectedFile.OpenReadStream()))
        {
            string? line = await reader.ReadLineAsync();
            if (line is null)
                return;

            csvFileContent.Add(line.Split(','));

            int linesLeft = 4;
            while ((line = await reader.ReadLineAsync()) != null && linesLeft > 0)
            {
                csvFileContent.Add(line.Split(','));
                linesLeft--;
            }
        }

        StateHasChanged();
    }

    private async void ImportFile()
    {
        if (selectedFile is null)
            return;

        var config = new CsvConfiguration(CultureInfo.InvariantCulture)
        {
            HasHeaderRecord = false,
            MissingFieldFound = null,
        };

        using (var reader = new StreamReader(selectedFile.OpenReadStream()))
        using (var csv = new CsvReader(reader, config))
        {
            CardMap cardMap; 

            if (!UseCustomTermLanguage && !UseCustomDefinitionLanguage)
                cardMap = new CardMap(importColumns["Term"].Column - 1, importColumns["Definition"].Column - 1);
            else if (UseCustomTermLanguage && !UseCustomDefinitionLanguage)
                cardMap = new CardMap(importColumns["Term"].Column - 1, importColumns["Definition"].Column - 1, definitionLanguageIndex: importColumns["DefinitionLanguage"].Column - 1);
            else if (UseCustomDefinitionLanguage && !UseCustomTermLanguage)
                cardMap = new CardMap(importColumns["Term"].Column - 1, importColumns["Definition"].Column - 1, termLanguageIndex: importColumns["TermLanguage"].Column - 1);
            else
                cardMap = new CardMap(importColumns["Term"].Column - 1, importColumns["Definition"].Column - 1, importColumns["TermLanguage"].Column - 1, importColumns["DefinitionLanguage"].Column - 1);


            csv.Context.RegisterClassMap(cardMap);

            cards = (await csv.GetRecordsAsync<BlazorLanguageLearningApp.Shared.Card>().ToListAsync())
                .Where(c => c.TermLanguage.Length <= 25 && c.DefinitionLanguage.Length <= 25 && c.Term.Length <= 50 && c.Definition.Length <= 50).ToList();

            if (UseCustomTermLanguage)
                cards.ForEach((c) => c.TermLanguage = customTermLanguage);
            
            if (UseCustomDefinitionLanguage)
                cards.ForEach((c) => c.DefinitionLanguage = customDefinitionLanguage);
        }

        await importFromCsvModal.HideAsync();
        await importSelectionModal.ShowAsync();
    }

    private IEnumerable<int> GetAvailableColumns(int selectedValue)
    {
        var taken = importColumns.Values.Select(x => x.Column).Where(c => c != 0);
        return new[] { 1, 2, 3, 4 }.Where(opt => opt == selectedValue || !taken.Contains(opt));
    }

    private enum ColumnName { TermLanguage, DefinitionLanguage, Term, Definition }
    private class SelectColumnResponse { public int Column { get; set; } }
} 
