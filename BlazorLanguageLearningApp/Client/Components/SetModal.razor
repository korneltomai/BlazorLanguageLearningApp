@using System.ComponentModel.DataAnnotations

@inject FolderService FolderService
@inject SetService SetService
@inject IStringLocalizer<Pages.Set> Loc

<Modal @ref="modal" Title="@Title" IsVerticallyCentered="true">
    <BodyTemplate>
        <EditForm EditContext="@editContext" OnValidSubmit="HandleOnValidSubmit">
            <DataAnnotationsValidator />

            <div class="form-group mb-3 container">
                <label>@Loc["Name"]: <span class="text-danger">*</span></label>
                <div class="w-100">
                    <TextInput @bind-Value="@set.Name" Placeholder="@Loc["EnterSetName"]" MaxLength="25" />
                    <ValidationMessage For="@(() => set.Name)" />
                </div>
            </div>

            <div class="form-group mb-3 container">
                <label>@Loc["Description"]:</label>
                <div class="w-100">
                    <TextAreaInput @bind-Value="@set.Description" Rows="5" Placeholder="@Loc["EnterSetDescription"]" MaxLength="500" />
                </div>
            </div>

            <div class="form-group mb-3 container">
                <InputRadioGroup @bind-Value="set.Visibility">
                    <div>
                        <label>
                            <InputRadio Value="Visibility.Private" />
                            @Loc["Private"]
                        </label>
                    </div>
                    <div>
                        <label>
                            <InputRadio Value="Visibility.FriendsOnly" />
                            @Loc["FriendsOnly"]
                        </label>
                    </div>
                    <div>
                        <label>
                            <InputRadio Value="Visibility.Public" />
                            @Loc["Public"]
                        </label>
                    </div>
                </InputRadioGroup>
            </div>

            <div class="row">
                <div class="col-md-12 text-right">

                    <Button Type="ButtonType.Submit" Color="ButtonColor.Primary" Class="float-end">
                        @if (Editing)
                        {
                            @Loc["Apply"]
                        }
                        else
                        {
                            @Loc["Create"]
                        }
                    </Button>
                    <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" Class="float-end me-2" @onclick="OnHideModalClick">@Loc["Close"]</Button>
                </div>
            </div>
        </EditForm>
    </BodyTemplate>
</Modal>

@if (Editing)
{
    <Button Type="ButtonType.Button" Color="ButtonColor.Primary" Class="w-100" @onclick="OnShowModalClick">
        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-pencil-fill" viewBox="0 0 16 16">
            <path d="M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.5.5 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11z" />
        </svg>
        @Loc["Edit"]
    </Button>
}
else
{
    <Button Type="ButtonType.Button" Color="ButtonColor.Success" Class="w-100" @onclick="OnShowModalClick">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-plus-square me-1" viewBox="0 0 16 16">
            <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z" />
            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
        </svg>
        @Loc["CreateNewSet"]
    </Button>
}

@code {
    [Parameter]
    public bool Editing { get; set; }
    private string? Title { get; set; }

    private Modal modal;
    private Set set = new();
    private EditContext? editContext;

    protected override void OnInitialized()
    {
        if (Editing)
        {
            Title = Loc["EditSet"];
            set = SetService.CurrentSet!;
        }
        else
            Title = Loc["CreateNewSet"];


        editContext = new EditContext(set);
        base.OnInitialized();
    }

    public async void HandleOnValidSubmit()
    {
        if (editContext!.Validate())
        {
            if (Editing)
            {
                SetService.UpdateSet(set);
            }
            else
            {
                // Sets the id for the testing data
                if (FolderService.CurrentFolder!.Sets.Count > 0)
                    set.Id = FolderService.CurrentFolder!.Sets.Max(s => s.Id) + 1; 
                else
                    set.Id = 1;

                SetService.AddSet(set);
            }


            await modal?.HideAsync();
        }
    }

    private void UpdateVisibility(Visibility visibility) => set.Visibility = visibility;

    private async Task OnShowModalClick()
    {
        await modal?.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal?.HideAsync();
    }
}