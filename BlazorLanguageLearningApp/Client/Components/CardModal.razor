@using System.ComponentModel.DataAnnotations

@inject SetService SetService
@inject CardService CardService
@inject IStringLocalizer<Pages.Set> Loc

<Modal @ref="modal" Title="@Title" IsVerticallyCentered="true" OnHidden="OnModalHidden">
    <BodyTemplate>
        <EditForm EditContext="@editContext" OnValidSubmit="HandleOnValidSubmit">
            <DataAnnotationsValidator />

            <div class="form-group mb-3 container">
                <label>@Loc["Term"]: <span class="text-danger">*</span></label>
                <div class="w-100">
                    <TextInput @bind-Value="@Card.Term" Placeholder="@Loc["EnterTerm"]" MaxLength="25" />
                    <ValidationMessage For="@(() => Card.Term)" />
                </div>
            </div>

            <div class="form-group mb-3 container">
                <label>@Loc["Definition"]: <span class="text-danger">*</span></label>
                <div class="w-100">
                    <TextInput @bind-Value="@Card.Definition" Placeholder="@Loc["EnterDefinition"]" MaxLength="25" />
                    <ValidationMessage For="@(() => Card.Definition)" />
                </div>
            </div>

            <div class="form-group mb-3 container">
                <label>@Loc["TermLanguage"]:</label>
                <div class="w-100">
                    <TextInput @bind-Value="@Card.TermLanguage" Placeholder="@Loc["TermLanguage"]" MaxLength="25" />
                </div>
            </div>

            <div class="form-group mb-3 container">
                <label>@Loc["DefinitionLanguage"]:</label>
                <div class="w-100">
                    <TextInput @bind-Value="@Card.DefinitionLanguage" Placeholder="@Loc["DefinitionLanguage"]" MaxLength="25" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-12 text-right">

                    <Button Type="ButtonType.Submit" Color="ButtonColor.Primary" Class="float-end">
                        @if (Editing)
                            @Loc["Apply"]
                        else
                            @Loc["Create"]
                    </Button>
                    <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" Class="float-end me-2" @onclick="OnHideModalClick">@Loc["Close"]</Button>
                    @if (Editing)
                    {
                        <Button Type="ButtonType.Button" Color="ButtonColor.Danger" Class="float-start" @onclick="DeleteCard">@Loc["Delete"]</Button>
                    }
                    
                </div>
            </div>
        </EditForm>
    </BodyTemplate>
</Modal>

@if (Editing)
{
    <button class="cardLink mb-3 btn p-0" @onclick="OnShowModalClick">
        @ChildContent
    </button>
}
else
{
    <Button Type="ButtonType.Button" Color="ButtonColor.Success" Class="w-100" @onclick="OnShowModalClick">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-plus-square me-1" viewBox="0 0 16 16">
            <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z" />
            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
        </svg>
        @Loc["CreateNewCard"]
    </Button>
}

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool Editing { get; set; }

    [Parameter]
    public BlazorLanguageLearningApp.Shared.Card Card { get; set; } = new();

    [Parameter]
    public required int SetId { get; set; }

    [Parameter]
    public required Action UpdateSetList { get; set; }

    private string? Title { get; set; }

    private Modal modal = default!;

    private EditContext? editContext;

    protected override void OnInitialized()
    {
        if (Editing)
        {
            Title = Loc["EditCard"];
        }
        else
            Title = Loc["CreateNewCard"];

        editContext = new EditContext(Card);
    }

    public async void HandleOnValidSubmit()
    {
        if (editContext!.Validate())
        {
            if (Editing)
                await CardService.UpdateCard(Card);
            else
                await CardService.CreateCard(Card, SetService.CurrentSet!.Id);

            await SetService.GetSetById(SetId);
            UpdateSetList.Invoke();

            await modal.HideAsync();
        }
    }

    public async void DeleteCard()
    {
        await CardService.DeleteCard(Card.Id);

        await SetService.GetSetById(SetId);
        UpdateSetList.Invoke();

        await modal.HideAsync();
    }

    private void OnModalHidden()
    {
        if (!Editing)
            Card = new();
    }

    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }
}