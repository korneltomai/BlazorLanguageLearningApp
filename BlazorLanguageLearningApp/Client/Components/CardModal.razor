@using System.ComponentModel.DataAnnotations

@inject SetService SetService
@inject CardService CardService
@inject IStringLocalizer<Pages.Set> Loc

<Modal @ref="modal" Title="@Title" IsVerticallyCentered="true" OnHidden="OnModalHiddenAsync">
    <BodyTemplate>
        <EditForm EditContext="@editContext" OnValidSubmit="HandleOnValidSubmit">
            <DataAnnotationsValidator />

            <div class="form-group mb-3 container">
                <label>@Loc["Term"]: <span class="text-danger">*</span></label>
                <div class="w-100">
                    <TextInput @bind-Value="@card.Term" Placeholder="@Loc["EnterTerm"]" MaxLength="25" />
                    <ValidationMessage For="@(() => card.Term)" />
                </div>
            </div>

            <div class="form-group mb-3 container">
                <label>@Loc["Definition"]: <span class="text-danger">*</span></label>
                <div class="w-100">
                    <TextInput @bind-Value="@card.Definition" Placeholder="@Loc["EnterDefinition"]" MaxLength="25" />
                    <ValidationMessage For="@(() => card.Definition)" />
                </div>
            </div>

            <div class="form-group mb-3 container">
                <label>@Loc["TermLanguage"]:</label>
                <div class="w-100">
                    <TextInput @bind-Value="@card.TermLanguage" Placeholder="@Loc["TermLanguage"]" MaxLength="25" />
                </div>
            </div>

            <div class="form-group mb-3 container">
                <label>@Loc["DefinitionLanguage"]:</label>
                <div class="w-100">
                    <TextInput @bind-Value="@card.DefinitionLanguage" Placeholder="@Loc["DefinitionLanguage"]" MaxLength="25" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-12 text-right">

                    <Button Type="ButtonType.Submit" Color="ButtonColor.Primary" Class="float-end">
                        @if (Editing)
                        {
                            @Loc["Apply"]
                        }
                        else
                        {
                            @Loc["Create"]
                        }
                    </Button>
                    <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" Class="float-end me-2" @onclick="OnHideModalClick">@Loc["Close"]</Button>
                    @if (Editing)
                    {
                        <Button Type="ButtonType.Button" Color="ButtonColor.Danger" Class="float-start" @onclick="DeleteCard">@Loc["Delete"]</Button>
                    }
                    
                </div>
            </div>
        </EditForm>
    </BodyTemplate>
</Modal>

@if (Editing)
{
    <button class="cardLink mb-3 btn p-0" @onclick="OnShowModalClick">
        @ChildContent
    </button>
}
else
{
    <Button Type="ButtonType.Button" Color="ButtonColor.Success" Class="w-100" @onclick="OnShowModalClick">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-plus-square me-1" viewBox="0 0 16 16">
            <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z" />
            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
        </svg>
        @Loc["CreateNewCard"]
    </Button>
}

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool Editing { get; set; }

    [Parameter]
    public int Id { get; set; }

    private string? Title { get; set; }

    private Modal modal;
    private BlazorLanguageLearningApp.Shared.Card card = new();
    private EditContext? editContext;

    protected override void OnInitialized()
    {
        if (Editing)
        {
            Title = Loc["EditCard"];
            card = CardService.GetCard(Id)!;
        }
        else
            Title = Loc["CreateNewCard"];


        editContext = new EditContext(card);
        base.OnInitialized();
    }

    public async void HandleOnValidSubmit()
    {
        if (editContext!.Validate())
        {
            if (Editing)
            {
                CardService.UpdateCard(card);
            }
            else
            {
                // Sets the id for the testing data
                if (SetService.CurrentSet!.Cards.Count > 0)
                    card.Id = SetService.CurrentSet!.Cards.Max(c => c.Id) + 1;
                else
                    card.Id = 1;

                CardService.AddCard(card);
            }

            await modal?.HideAsync();
        }
    }

    public async void DeleteCard()
    {
        CardService.RemoveCard(card);
        await modal?.HideAsync();
    }

    private async Task OnModalHiddenAsync()
    {
        card = new();
    }

    private async Task OnShowModalClick()
    {
        await modal?.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal?.HideAsync();
    }
}