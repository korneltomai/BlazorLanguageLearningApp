@using System.ComponentModel.DataAnnotations

@inject FolderService FolderService
@inject IStringLocalizer<Pages.Sets> Loc

<Modal @ref="modal" Title="@Loc["CreateNewFolder"]" IsVerticallyCentered="true">
    <BodyTemplate>
        <EditForm EditContext="@editContext" OnValidSubmit="HandleOnValidSubmit">
            <DataAnnotationsValidator />

            <div class="form-group mb-3 px-2">
                <label>@Loc["Name"]: <span class="text-danger">*</span></label>
                <div class="w-100">
                    <TextInput @bind-Value="@folder.Name" Placeholder="@Loc["EnterFolderName"]" MaxLength="25" />
                    <ValidationMessage For="@(() => folder.Name)" />
                </div>
            </div>

            <div class="form-group mb-3 px-2">
                <label>@Loc["Description"]:</label>
                <div class="w-100">
                    <TextAreaInput @bind-Value="@folder.Description" Rows="5" Placeholder="@Loc["EnterFolderDescription"]" MaxLength="500" />
                </div>
            </div>

            <div class="form-group mb-3 px-2">
                <InputRadioGroup @bind-Value="folder.Visibility">
                    <div>
                        <label>
                            <InputRadio Value="Visibility.Private"/> 
                            @Loc["Private"]
                        </label>
                    </div>
                    <div>
                        <label>
                            <InputRadio Value="Visibility.FriendsOnly" /> 
                            @Loc["FriendsOnly"]
                        </label>
                    </div>
                    <div>
                        <label>
                            <InputRadio Value="Visibility.Public" /> 
                            @Loc["Public"]
                        </label>
                    </div>
                </InputRadioGroup>
            </div>

            <div class="row">
                <div class="col-md-12 text-right">
                    <Button Type="ButtonType.Submit" Color="ButtonColor.Primary" Class="float-end">@Loc["Create"]</Button>
                    <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" Class="float-end me-2" @onclick="OnHideModalClick">@Loc["Close"]</Button>
                </div>
            </div>
        </EditForm>
    </BodyTemplate>
</Modal>

<Button Color="ButtonColor.Success" @onclick="OnShowModalClick" Class="w-100">
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-plus-square me-1" viewBox="0 0 16 16">
        <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z" />
        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
    </svg>
    @Loc["CreateNewFolder"]
</Button>

@code {
    private Modal modal;
    private FolderInput folder = new();
    private EditContext? editContext;

    protected override void OnInitialized()
    {
        editContext = new EditContext(folder);
        base.OnInitialized();
    }

    public async void HandleOnValidSubmit()
    {
        if (editContext!.Validate())
        {
            Folder newFolder = new Folder(folder.Name, folder.Description, folder.Visibility);
            newFolder.Id = FolderService.GetAllFolders().Max(f => f.Id) + 1; // Sets the id for the testing data
            FolderService.AddFolder(newFolder);
            await modal?.HideAsync();
        }
    }

    private void UpdateVisibility(Visibility visibility) => folder.Visibility = visibility;

    private async Task OnShowModalClick()
    {
        await modal?.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal?.HideAsync();
    }

    private class FolderInput
    {
        [Required(ErrorMessage = "Folder name is required.")]
        public string Name { get; set; } = string.Empty;

        public string Description { get; set; } = string.Empty;

        [Required]
        public Visibility Visibility { get; set; }
    }
}