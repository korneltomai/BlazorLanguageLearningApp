@page "/{username}/sets"
@page "/{username}/sets/{folderId:int}"

@using BlazorLanguageLearningApp.Shared
@using BlazorLanguageLearningApp.Client.Components
@using BlazorLanguageLearningApp.Client.Helpers
@using System.Drawing

@inject FolderService FolderService
@inject SetService SetService
@inject NavigationManager Navigation
@inject IStringLocalizer<Sets> Loc

@if (FolderId != default && FolderService.CurrentFolder == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <PageTitle>@Loc["Sets"]</PageTitle>

    <div class="row d-lg-flex m-0 p-0">
        <div class="bg-light d-none d-lg-block col-lg-3 col-xxl-2">
            <div>
                <h3 class="text-center mt-2">
                    <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor" class="bi bi-folder" viewBox="0 0 16 16">
                        <path d="M.54 3.87.5 3a2 2 0 0 1 2-2h3.672a2 2 0 0 1 1.414.586l.828.828A2 2 0 0 0 9.828 3h3.982a2 2 0 0 1 1.992 2.181l-.637 7A2 2 0 0 1 13.174 14H2.826a2 2 0 0 1-1.991-1.819l-.637-7a2 2 0 0 1 .342-1.31zM2.19 4a1 1 0 0 0-.996 1.09l.637 7a1 1 0 0 0 .995.91h10.348a1 1 0 0 0 .995-.91l.637-7A1 1 0 0 0 13.81 4zm4.69-1.707A1 1 0 0 0 6.172 2H2.5a1 1 0 0 0-1 .981l.006.139q.323-.119.684-.12h5.396z" />
                    </svg>
                    @Loc["Folders"]
                </h3>
                <div class="sidebar overflow-auto py-1">
                    @foreach (Folder folder in folders)
                    {
                        <div class="container justify-content-center">
                            <btn class="btn btn-primary w-100 mb-1" @onclick="() => ChangeFolder(folder.Id)">@folder.Name</btn>
                        </div>
                    }
                </div>
            </div>
            <div class="mt-2 my-2">
                <FolderModal Username="@Username"/>
            </div>
        </div>

        <div class="content d-flex flex-column col-lg-9 col-xxl-10 px-0">
            <BreadcrumbNavigation CurrentPage="@Navigation.Uri" Username="@Username" CurrentFolder="@FolderService.CurrentFolder"/>

            <div class="d-flex container-fluid d-lg-none">
                <div class="form-floating col-9 pe-2">
                    <InputSelect class="form-select bg-primary text-white h-100" id="folderSelect" aria-label="Change selected folder" @bind-Value:get="FolderId" @bind-Value:set="ChangeFolder">
                        <option value="0">@Loc["SelectAFolder"]</option>
                        @foreach (Folder folder in folders)
                        {
                            <option value="@folder.Id">@folder.Name</option>
                        }
                    </InputSelect>
                    <label class="text-white small" for="folderSelect">@Loc["Folders"]</label>
                </div>
                <div class="col-3">
                    <FolderModal Username="@Username"/>
                </div>
            </div>
            <hr class="d-lg-none mb-2" />

            @if (FolderId == default)
            {
                <div class="container-fluid mt-2">
                    <p class="h1">@Loc["NoFolderOpen"]</p>
                </div>
            }
            else
            {
                <div class="container-fluid mt-2">
                    <div class="row">
                        <div class="col-12 col-sm-9 col-xxl-10">
                            <div class="d-flex align-items-center">
                                <h1 class="fs-3 mb-0">@FolderService.CurrentFolder!.Name</h1>
                                <span class="text-secondary ms-2 me-auto small">@Loc[$"{FolderService.CurrentFolder.Visibility}"]</span>
                            </div>
                            <div class="mb-3 mb-sm-0 me-sm-4 pe-2">
                                @FolderService.CurrentFolder.Description
                            </div>
                        </div>
                        <div class="d-flex align-items-center col-12 col-sm-3 col-xxl-2 ps-sm-0">
                            <div class="d-flex d-sm-block w-100 p-0 m-0">
                                <div class="col-6 col-sm-12 pe-2 pe-sm-0">
                                    <FolderModal Editing="true" Folder="@FolderService.CurrentFolder"/>
                                </div>
                                <div class="col-6 col-sm-12 mt-sm-1 p-0 ps-2 ps-sm-0">
                                    <DeleteFolderModal Username="@Username"/>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <hr />
                <div class="container-fluid mb-3">
                    <div class="d-flex align-items-center flex-wrap">
                        <div class="col-12 col-sm-auto me-auto mb-2 mb-sm-0">
                            <SetModal Username="@Username"/>
                        </div>
                        <div class="form-floating col-12 col-sm-auto ms-auto p-0">
                            <InputSelect class="form-select bg-primary text-white" id="orderBySelect" aria-label="Order sets by" @bind-Value:get="Ordering" @bind-Value:set="OrderSets">
                                <option value="@SetOrdering.NameIncreasing">@Loc["NameAZ"]</option>
                                <option value="@SetOrdering.NameDecreasing">@Loc["NameZA"]</option>
                                <option value="@SetOrdering.ScoreIncreasing">@Loc["ScoreIncreasing"]</option>
                                <option value="@SetOrdering.ScoreDecreasing">@Loc["ScoreDecreasing"]</option>
                            </InputSelect>
                            <label class="text-white" for="orderBySelect"><small>@Loc["OrderBy"]</small></label>
                        </div>
                    </div>
                    <div class="d-flex flex-row-reverse w-100">
                        <span class="fs-5 mt-2 mb-0">@String.Format($"{Loc["SetsInFolder"]}", @FolderService.CurrentFolder.Sets.Count())</span>
                    </div>
                </div>
                <div class="setContainer container-fluid">
                    <div class="d-flex flex-column pb-3">
                        @foreach (BlazorLanguageLearningApp.Shared.Set set in FolderService.CurrentFolder.Sets)
                        {
                            <a class="setLink mb-3" href="@($"{Username}/sets/{FolderId}/{set.Id}")">
                                <div class="d-flex row border border-black rounded-3 mx-0">
                                    <div class="col-10 col-md-11 my-3 pe-0">
                                        <div class="d-flex justify-content-center px-1">
                                            <span class="h4 mb-0">@set.Name</span>
                                        </div>
                                        <div class="d-flex justify-content-center">
                                            <small class="text-secondary">@set.TermsLanguage - @set.DefinitionsLanguage</small>
                                        </div>
                                    </div>
                                    <div class="d-flex flex-row-reverse col-2 col-md-1 p-0">
                                        <div class="learntPercantage d-flex justify-content-center align-items-center rounded-circle border m-2" style="@GetColorStyleForPercentage(@set.LearntPercantage)">
                                            @set.LearntPercantage
                                        </div>
                                    </div>
                                </div>
                            </a>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public required string Username { get; set; }

    [Parameter]
    public int FolderId { get; set; }

    private List<Folder> folders = new();
    private SetOrdering Ordering { get; set; }

    protected override void OnInitialized()
    {
        FolderService.OnChange.Add(StateHasChanged);
        SetService.OnChange.Add(StateHasChanged);
    }

    protected async override Task OnParametersSetAsync()
    {
        var result = await FolderService.GetAllFoldersForUser(Username);
        if (result is not null)
            folders = result;

        if (FolderId != default)
        {
            FolderService.CurrentFolder = folders.FirstOrDefault(f => f.Id == FolderId);

            if (FolderService.CurrentFolder is null)
                Navigation.NavigateTo("page-not-found");
        }
    }

    private void OrderSets(SetOrdering selectedOrdering)
    {
        Ordering = selectedOrdering;

        if (Ordering == SetOrdering.NameIncreasing)
            FolderService.CurrentFolder!.Sets = FolderService.CurrentFolder.Sets.OrderBy(s => s.Name).ToList();
        else if (Ordering == SetOrdering.NameDecreasing)
            FolderService.CurrentFolder!.Sets = FolderService.CurrentFolder.Sets.OrderByDescending(s => s.Name).ToList();
        else if (Ordering == SetOrdering.ScoreIncreasing)
            FolderService.CurrentFolder!.Sets = FolderService.CurrentFolder.Sets.OrderBy(s => s.LearntPercantage).ToList();
        else if (Ordering == SetOrdering.ScoreDecreasing)
            FolderService.CurrentFolder!.Sets = FolderService.CurrentFolder.Sets.OrderByDescending(s => s.LearntPercantage).ToList();
    }

    private void ChangeFolder(int folderId)
    {
        Navigation.NavigateTo($"{Username}/sets/{folderId}");
    }

    private string GetColorStyleForPercentage(int percentage)
    {
        Color lightGradient = ColorPicker.GetGradient((double)percentage / 100, Color.FromArgb(100, 255, 0, 0), Color.FromArgb(100, 240, 240, 0), Color.FromArgb(100, 0, 225, 0));
        Color darkGradient = ColorPicker.GetGradient((double)percentage / 100, Color.FromArgb(100, 128, 0, 0), Color.FromArgb(100, 128, 128, 0), Color.FromArgb(100, 0, 128, 0));

        return $"background-color: rgb({lightGradient.R}, {lightGradient.G}, {lightGradient.B});" +
        $"border-color: rgb({darkGradient.R}, {darkGradient.G}, {darkGradient.B}) !important;" +
        $"color: rgb({darkGradient.R}, {darkGradient.G}, {darkGradient.B});";
    }
}
